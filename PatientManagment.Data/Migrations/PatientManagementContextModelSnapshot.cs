// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PatientManagement.Data;

#nullable disable

namespace PatientManagement.Data.Migrations
{
    [DbContext(typeof(PatientManagementContext))]
    partial class PatientManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PatientManagement.Core.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Department where the surgeries are carried out",
                            Name = "Surgeon"
                        });
                });

            modelBuilder.Entity("PatientManagement.Core.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmailAddress = "majkelreszka@gmail.com",
                            FullName = "Majkel Reszka",
                            Gender = 0,
                            InsuranceNumber = 12353123
                        });
                });

            modelBuilder.Entity("PatientManagement.Core.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            RoomNumber = 10
                        });
                });

            modelBuilder.Entity("PatientManagement.Core.Entities.StuffMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeOfStuffMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("TypeOfStuffMemberId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            FullName = "Kamil Ollik",
                            TypeOfStuffMemberId = 1
                        });
                });

            modelBuilder.Entity("PatientManagement.Core.Entities.TypeOfStuffMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypesOfStuffMember");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Doctors which are qualified to do surgery",
                            Name = "Surgeons"
                        });
                });

            modelBuilder.Entity("PatientManagement.Core.Entities.Room", b =>
                {
                    b.HasOne("PatientManagement.Core.Entities.Department", null)
                        .WithMany("Rooms")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PatientManagement.Core.Entities.StuffMember", b =>
                {
                    b.HasOne("PatientManagement.Core.Entities.Department", null)
                        .WithMany("StuffMembers")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("PatientManagement.Core.Entities.TypeOfStuffMember", null)
                        .WithMany("StuffMembers")
                        .HasForeignKey("TypeOfStuffMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PatientManagement.Core.Entities.Department", b =>
                {
                    b.Navigation("Rooms");

                    b.Navigation("StuffMembers");
                });

            modelBuilder.Entity("PatientManagement.Core.Entities.TypeOfStuffMember", b =>
                {
                    b.Navigation("StuffMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
